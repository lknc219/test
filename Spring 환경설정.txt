java version 11 설치
intellj J 설치

start.spring.io(웹사이트) 접속 후 gradle, java, 버전, group, Artifact 설정
Add Dependencies 로 Spring Web, Thymeleaf 추가 
Generate 누르고 zip파일 받기

intelliJ 실행해서 오픈 후 받은 zip파일 압축 푼 경로에 가서 build.gradle 누르고 open project 
intelliJ 의 Setting에 들어가서 gradle 검색 후 build and run using, Run tests using 을 intelliJ IDEA로 바꿔준다.

controller로 요청이 왔을때 
mapping 이 되어있는지 검사 (ViewResolver가 알아서)
 -되어이있으면 해당 template 실행
 -되어있지 않으면 static 에서 해당 파일 있는지 찾아서 실행

@Responsebody 가 있으면 ViewResolver 대신 HttpMessageConverter 가 String으로 왔는지 객체로 왔는지 검사
 -String 으로 왔을 시 StringMessageConverter 가 변환해서 String 으로 넘겨주고
 -객체로 왔을 시 MappingJackson2HttpMessageConverter(SpringBoot에서 선택한 객체-json으로 바꿔주는 라이브러리) 가 Json구조로 변환해서 넘겨준다.

회원 도메인과 리포지토리 만들기(DB대신 만들어줌 아직 강의에서 DB설정을 안해줬기때문에 테스트 불가) 
controller 패키지 있는 곳에 domain 만들어 준 후 Member 생성(VO)
마찬가지로 같은 패키지에  repository 생성 후 DB작업에 필요한 생성 검색 기능을 만들어줌

테스트 케이스 작성 시
Junit 이용하고 프로젝트 생성 시 자동으로 만들어준 test 패키지에 테스트하고싶은 메소드Test.java 파일을 만들어준다. ctrl+shft+T 단축키
테스트class안에 테스트를 진행할 class의 객체를 생성해주고 테스트를 진행해야할 메소드별로 같은 이름의 메소드를 만들어주어 그 안에 테스트 로직을 작성한다.
  *) assertj assertions 클래스 활용
     assertThat(기준대상).isEqualsTo(비교대상); 으로 진행하면 
메소드 단위 테스트를 실행 할 수 있으며, 클래스 단위로도 실행 할 수 있다.
클래스단위로 실행 시 각 메소드별 순서는 정할 수 없고 순서에 따라 테스트 결과가 다르면 안됨(순서에 따른 의존도 존재하면 안된다.)
때문에 테스트 강의에서는 테스트 진행 할 class에 map을 클리어해주는 메소드를 넣고, 
  테스트가 끌날때마다 반복적으로 실행해줄 메소드 설정
  @AfterEach 에너테이션 설정후
  public void 메서드명(){
      테스트진행class.map클리어메소드();
  }
을 해준 후 클래스 단위로 테스트를 진행한다면 순서에 상관없이 모두 테스트를 성공적으로 마칠 수 있다.

이 예제에서는 repository 라는 클래스를 만들고 나서 Test Case를 작성했지만 반대로 TestCase를 먼저 작성할 수도 있다. (TTD - 테스트 주도 개발)


=======================================================================================
스프링 빈과 의존관계

컴포넌트 스캔이 되는 기본 패키지 - Spring Boot의 main 메서드가 있는 패키지와 그 하위 패키지들

스프링은 스피링컨테이너에 빈을 등록할 때 기본으로 싱글톤으로 등록한다.(하나만 유일하게 등록) 따라서 같은 스프링 빈이면 모두 같은 인스턴스이다.
싱글톤이 아니게 설정할 수 있지만, 특별한 경우를 제외하면 대부분 싱글톤으로 사용한다.

컴포넌트 스캔
Controller에서 Service를 통해 로직이 진행되며,  Repository 에 접근하여 결과를 view에 뿌려준다.
Controller가 Service를 의존한다고 표현(의존관계가 있다.)
Controller 클래스 생성후 클래스 선언부 위쪽에 @Controller 에너테이션을 입력해주면 
Spring Container에 Controller 클래스를 생성해서 보관하고 관리한다. (스프링 컨테이너에서 스프링 빈이 관리된다.)


MemberController 생성 후 MemberService를 사용 시 new를 해서 사용할 수 있지만 다른 컨트롤러에서도 사용할 수 있기 때문에 매번 new 하는건 비효율적이다.
MemberService class 선언부 위쪽에 @Service 를 입력해주면 Spring이 실행될때 SpringContainer에 class를 생성해서 등록해준다.
해당 컨트롤러에 MemberService를 가져다 사용하는 생성자를 만들고 @Autowired를 입력해주면 스프링 컨테이너에 등록되어있는 MemberService를 가져다 사용할 수 있다.
또, Service에 사용하는 Repository도 @Autowired 해주고 해당 Repository 구현체.java 의 class 선언부 위쪽에 @Repository 에너테이션을 입력해주면 위와 같은 방식으로 Repository를 가져다 사용할 수 있다.

자바코드로 직접 스프링 빈 등록
(여기서는 향후 메모리 리포지토리를 다른 리포지토리로 변경할 예정이므로, 컴포넌트 스캔 방식 대신에 자바 코드로 스프링 빈을 설정하겠다. 상황에따라 구현체를 다르게 해야한다.)
Spring 패키지에 SpringConfig.class 만들고 클래스 선언부 위쪽에 @Configuration 등록 후
빈으로 등록하고싶은 클래스를 리턴하는 메서드를 만든다. MemberService생성시 인자로 MemberRepository가 필요하기 때문에 해당 빈을 만드는 메서드를 인자로 넣어준다.
@Bean
public MemberService memberService(){
	return new MemberService(memberRepository());
}
@Bean
public MemberRepository memberRepository(){
	return new MemoryMemberRepository();
}

DI에는 필드 주입, setter주입, 생성자 주입이 있다.(XML주입도 있지만 최근에는 잘 사용하지 않는다.)
1. 생성자주입(주로 사용)
 -컴포넌트 조립시에만 변경이 가능하고 그 후에는 변경할수없어서 취지에 맞음
2. setter주입 
 -public하게 어디서든 setter를 호출하기 때문에 나중에 누구나 변경이 가능해서 약간 위험
3. 필드주입
 - 조립시에도 변경이 불가능해서 intellij에서도 밑줄이 뜰만큼 권장하지 않는다. 



