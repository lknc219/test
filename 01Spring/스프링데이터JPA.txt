스프링부트와 JPA만 사용해도 개발 생산성이 많이 증가하지만, 여기에 스프링 데이터 JPA를 사용하면,
리포지토리에 구현클래스 없이 인터페이스만으로 개발을 완료할 수 있습니다. 그리고
반복 개발해온 CRUD기능도 스프링 데이터 JPA가 모두 제공합니다.

기존의 Repository 방식들
1. 순수JDBC 
  -하나하나 모든 쿼리와 커넥션들을 연결하고 닫아주는 코드를 작성해야한다.
2. JDBCTemplate
  -스프링 JdbcTemplate과 MyBatis 같은 라이브러리는 JDBC API에서 본 반복 코드를 대부분 제거해준다. 하지만 SQL은 직접 작성해야 한다
3. JPA
  -EntityManager로 모든걸 동작시킨다. application.properties에 설정해주고 주입받아 사용하면 된다.
4. 스프링 데이터 JPA
  -다른 방법과는 다르게 class를 구현하지 않아도 된다.
  -interface만을 통해 개발할 수 있으며, 개발해야할 Repository와 JpaRepository를 상속받아 사용한다.
  -JpaRepository의 제네릭으로는 구현할 테이블의 객체(Member domain)와 해당 객체의 pk를 입력해주면 된다
  -ex) JpaRepository<Member, Long>
  -Interface를 만들어두면 JpaRepository가 알아서 해당 테이블 객체에 대한 기본 기능들을 구현해주고 Bean으로 등록해준다.
  -Bean으로 등록해주기 때문에 설정파일에서 MemberRepository memberRepository; 후 생성자로 인잭션 해주면 
    MemberRepository를 상속받아 구현한 클래스는 자동생성된 클래스 뿐이기 때문에 자동으로 주입되고 사용할 수 있다.  